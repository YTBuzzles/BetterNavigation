package com.example.betternavigation

import android.accessibilityservice.AccessibilityService
import android.content.Intent
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.util.Log
import android.view.accessibility.AccessibilityEvent
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import androidx.core.content.ContextCompat
import com.example.betternavigation.databinding.ActivityMainBinding

lateinit var binding: ActivityMainBinding
lateinit var toolbar: Toolbar
class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
//        val navController = findNavController(binding)
//        val appBarConfiguration = AppBarConfiguration(navController.graph)
//        findViewById<Toolbar>(R.id.action_settings).setupWithNavController(navController, appBarConfiguration)
        val accessibilitySettings = findViewById<Button>(R.id.accessibility)
        accessibilitySettings.setOnClickListener() {
            val intent: Intent = Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS)
            startActivity(intent)
        }

        if (!Settings.canDrawOverlays(this)) {
            val intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
                Uri.parse("package:$packageName"))
            startActivity(intent)
        } else {
            // Permission already granted, proceed with your overlay logic
            return
        }
    }




//    override fun onSupportNavigateUp(): Boolean {
//        val navController = findNavController(R.id.fragment_main)
//        return navController.navigateUp() || super.onSupportNavigateUp()
//    }
}


class MyAccessibilityService : AccessibilityService() {

    override fun onAccessibilityEvent(event: AccessibilityEvent?) {
        Log.d("AccessibilityService", "Received event: $event")


        // THIS was generated by gemini

        private var overlayElements: List<Rect> = listOf() // Replace with logic to determine your overlay element bounds

        override fun onAccessibilityEvent(event: AccessibilityEvent) {
            if (event.eventType == AccessibilityEvent.TYPE_VIEW_CLICKED) {
                val node = event.source
                if (node != null) {
                    val clickX = event.x
                    val clickY = event.y
                    if (!isTouchOnOverlayElements(node, clickX, clickY)) {
                        val rect = Rect()
                        node.getBoundsInScreen(rect)
                        if (rect.contains(clickX, clickY)) {
                            // Dispatch the touch event to the underlying app
                            dispatchGesture(event.getGesture(), rect, null, 0)
                        }
                    }
                }
            }
        }

        private fun isTouchOnOverlayElements(node: AccessibilityNodeInfo, x: Int, y: Int): Boolean {
            // Implement logic to check if the touch coordinates are within the bounds of your overlay elements
            // You can use node.getBoundsInScreen(rect) and compare with x and y
            // Use AccessibilityNodeInfo properties like className, resourceId, etc. for accurate identification
            return false // Replace with your implementation
        }

        override fun onInterrupt() {
            // Handle service interruption (e.g., service disabled)
        }


        // THE GIST IS TO INTERCEPT THE TOUCHES AND FIND THEIR POSITION, IF THEY ARE NOT ON A BUTTON OR SOMETHING
        // THEN DISPATCH THE EVENT


        if (event?.eventType == AccessibilityEvent.TYPE_VIEW_CLICKED) {
            val txt = event.text[0]

            if (txt == "screenshot") {
                performGlobalAction(9)
            } else if (txt == "back") {
                performGlobalAction(1)
            } else if (txt == "recents") {
                performGlobalAction(3)
            } else if (txt == "home") {
                performGlobalAction(2)
            } else if (txt == "notifications") {
                performGlobalAction(4)
            } else if (txt == "quicksettings") {
                performGlobalAction(5)
            } else if (txt == "power") {
                performGlobalAction(6)
            } else if (txt == "lockscreen") {
                performGlobalAction(8)
            }
        }

//        if (event?.eventType == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {
//            // Handle overlay creation here
//            // Example: Show a transparent overlay
//            val overlayIntent = Intent(applicationContext, OverlayActivity::class.java)
//            overlayIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
//            startActivity(overlayIntent)
//        }
    }

    override fun onInterrupt() {
        TODO("Not yet implemented")
        // Handle interruption (if necessary)
    }


    override fun onServiceConnected() {
        super.onServiceConnected()
        Log.d("Accessibility Service", "onServiceConnected:")

        val overlayIntent = Intent(applicationContext, OverlayService::class.java)
//        overlayIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        ContextCompat.startForegroundService(applicationContext, overlayIntent)
//        startService(overlayIntent)
    }
}